"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/embla-carousel-autoplay";
exports.ids = ["vendor-chunks/embla-carousel-autoplay"];
exports.modules = {

/***/ "(ssr)/./node_modules/embla-carousel-autoplay/esm/embla-carousel-autoplay.esm.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/embla-carousel-autoplay/esm/embla-carousel-autoplay.esm.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Autoplay)\n/* harmony export */ });\nconst defaultOptions = {\n    active: true,\n    breakpoints: {},\n    delay: 4000,\n    jump: false,\n    playOnInit: true,\n    stopOnFocusIn: true,\n    stopOnInteraction: true,\n    stopOnMouseEnter: false,\n    stopOnLastSnap: false,\n    rootNode: null\n};\nfunction normalizeDelay(emblaApi, delay) {\n    const scrollSnaps = emblaApi.scrollSnapList();\n    if (typeof delay === \"number\") {\n        return scrollSnaps.map(()=>delay);\n    }\n    return delay(scrollSnaps, emblaApi);\n}\nfunction getAutoplayRootNode(emblaApi, rootNode) {\n    const emblaRootNode = emblaApi.rootNode();\n    return rootNode && rootNode(emblaRootNode) || emblaRootNode;\n}\nfunction Autoplay(userOptions = {}) {\n    let options;\n    let emblaApi;\n    let destroyed;\n    let delay;\n    let timerStartTime = null;\n    let timerId = 0;\n    let autoplayActive = false;\n    let mouseIsOver = false;\n    let playOnDocumentVisible = false;\n    let jump = false;\n    function init(emblaApiInstance, optionsHandler) {\n        emblaApi = emblaApiInstance;\n        const { mergeOptions, optionsAtMedia } = optionsHandler;\n        const optionsBase = mergeOptions(defaultOptions, Autoplay.globalOptions);\n        const allOptions = mergeOptions(optionsBase, userOptions);\n        options = optionsAtMedia(allOptions);\n        if (emblaApi.scrollSnapList().length <= 1) return;\n        jump = options.jump;\n        destroyed = false;\n        delay = normalizeDelay(emblaApi, options.delay);\n        const { eventStore, ownerDocument } = emblaApi.internalEngine();\n        const isDraggable = !!emblaApi.internalEngine().options.watchDrag;\n        const root = getAutoplayRootNode(emblaApi, options.rootNode);\n        eventStore.add(ownerDocument, \"visibilitychange\", visibilityChange);\n        if (isDraggable) {\n            emblaApi.on(\"pointerDown\", pointerDown);\n        }\n        if (isDraggable && !options.stopOnInteraction) {\n            emblaApi.on(\"pointerUp\", pointerUp);\n        }\n        if (options.stopOnMouseEnter) {\n            eventStore.add(root, \"mouseenter\", mouseEnter);\n        }\n        if (options.stopOnMouseEnter && !options.stopOnInteraction) {\n            eventStore.add(root, \"mouseleave\", mouseLeave);\n        }\n        if (options.stopOnFocusIn) {\n            emblaApi.on(\"slideFocusStart\", stopAutoplay);\n        }\n        if (options.stopOnFocusIn && !options.stopOnInteraction) {\n            eventStore.add(emblaApi.containerNode(), \"focusout\", startAutoplay);\n        }\n        if (options.playOnInit && !documentIsHidden()) startAutoplay();\n    }\n    function destroy() {\n        emblaApi.off(\"pointerDown\", pointerDown).off(\"pointerUp\", pointerUp).off(\"slideFocusStart\", stopAutoplay);\n        stopAutoplay();\n        destroyed = true;\n        autoplayActive = false;\n    }\n    function setTimer() {\n        const { ownerWindow } = emblaApi.internalEngine();\n        ownerWindow.clearTimeout(timerId);\n        timerId = ownerWindow.setTimeout(next, delay[emblaApi.selectedScrollSnap()]);\n        timerStartTime = new Date().getTime();\n        emblaApi.emit(\"autoplay:timerset\");\n    }\n    function clearTimer() {\n        const { ownerWindow } = emblaApi.internalEngine();\n        ownerWindow.clearTimeout(timerId);\n        timerId = 0;\n        timerStartTime = null;\n        emblaApi.emit(\"autoplay:timerstopped\");\n    }\n    function startAutoplay() {\n        if (destroyed) return;\n        if (!autoplayActive) emblaApi.emit(\"autoplay:play\");\n        setTimer();\n        autoplayActive = true;\n    }\n    function stopAutoplay() {\n        if (destroyed) return;\n        if (autoplayActive) emblaApi.emit(\"autoplay:stop\");\n        clearTimer();\n        autoplayActive = false;\n    }\n    function visibilityChange() {\n        if (documentIsHidden()) {\n            playOnDocumentVisible = autoplayActive;\n            return stopAutoplay();\n        }\n        if (playOnDocumentVisible) startAutoplay();\n    }\n    function documentIsHidden() {\n        const { ownerDocument } = emblaApi.internalEngine();\n        return ownerDocument.visibilityState === \"hidden\";\n    }\n    function pointerDown() {\n        if (!mouseIsOver) stopAutoplay();\n    }\n    function pointerUp() {\n        if (!mouseIsOver) startAutoplay();\n    }\n    function mouseEnter() {\n        mouseIsOver = true;\n        stopAutoplay();\n    }\n    function mouseLeave() {\n        mouseIsOver = false;\n        startAutoplay();\n    }\n    function play(jumpOverride) {\n        if (typeof jumpOverride !== \"undefined\") jump = jumpOverride;\n        startAutoplay();\n    }\n    function stop() {\n        if (autoplayActive) stopAutoplay();\n    }\n    function reset() {\n        if (autoplayActive) startAutoplay();\n    }\n    function isPlaying() {\n        return autoplayActive;\n    }\n    function next() {\n        const { index } = emblaApi.internalEngine();\n        const nextIndex = index.clone().add(1).get();\n        const lastIndex = emblaApi.scrollSnapList().length - 1;\n        const kill = options.stopOnLastSnap && nextIndex === lastIndex;\n        if (emblaApi.canScrollNext()) {\n            emblaApi.scrollNext(jump);\n        } else {\n            emblaApi.scrollTo(0, jump);\n        }\n        emblaApi.emit(\"autoplay:select\");\n        if (kill) return stopAutoplay();\n        startAutoplay();\n    }\n    function timeUntilNext() {\n        if (!timerStartTime) return null;\n        const currentDelay = delay[emblaApi.selectedScrollSnap()];\n        const timePastSinceStart = new Date().getTime() - timerStartTime;\n        return currentDelay - timePastSinceStart;\n    }\n    const self = {\n        name: \"autoplay\",\n        options: userOptions,\n        init,\n        destroy,\n        play,\n        stop,\n        reset,\n        isPlaying,\n        timeUntilNext\n    };\n    return self;\n}\nAutoplay.globalOptions = undefined;\n //# sourceMappingURL=embla-carousel-autoplay.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/embla-carousel-autoplay/esm/embla-carousel-autoplay.esm.js\n");

/***/ })

};
;